DESIGN NOTES

--------------------------------------------------------------------------------
JUST DONE

Most function sigs done

--------------------------------------------------------------------------------
NEXT STEPS (PORTING)

lambdas to investigage
list of instruction parts (any) to investigate in return result

--------------------------------------------------------------------------------

- work out which path we are going to boot up first - interactive probably
- work out a dependency tree of namespaces and functions we need to test to get there

- for each namespace in priority, port each function and test it
- build up a MVP that will take a memory image of a program, run it and
  generate some output (do offline build using the python tools here)
- integrate minimal IO and HLT instructions to get a simple data in and data out
  (might have to write a micro:bit specific input routine)

- get an interactive REPL shell working on serial
- put in the rest of the namespaces required to use it interactively
- note, is there any way to send simulated serial data in the simulator?

- plan out which micro:bit platform features to expose
- plan out how to map micro:bit features to IO/HLT/EXT instructions
- write adaptors for extended instructions and test

- plan out some resources we could built using this
  (specifically link to OCR/AQA/EDEXCEL schemes for using LMC)
- look for wider uses beyond the curriculum


--------------------------------------------------------------------------------
NEXT STEPS (TOOLS)

- Modify the grammar to add lvalue assignment
  - define in ideal grammar
  - transform into a left-recursive safe grammar
  - implement changes in code and refactor
  - write and run some test cases to see if it parses correctly

- Modify the abstract machine (TAC) to support variable assignment.
  - detect expression eval or assignment statement
  - for expr eval, insert OUT as normal
  - for assignment, emit instruction 'STA var' instead

- Update the test cases to include testing for lvalue assignment.

At this point, it should be possible to implement a range of non iterative
mathematical calculations

--------------------------------------------------------------------------------

Harden up the arithmetic engine, specifically better detection of runtime
errors due to overflows and underflows, and add necessary architecture so
that it is possible to implement 16 bit and 32 bit calculations (remember
we're a decimal machine at the moment, might want to implement the binary
machine architecture first, which is mostly just BUS_MAX settings)

- consider adding a V flag (overflow) that is set if the previous multiply
divide overflowed or underflowed. Do this as an architecture
annotation, as it is not part of the standard machine.

- might want to add an architectural feature that puts the flags into a
memory location somewhere, or a way to copy flags into A, so that they
can be stored for later consumption by bit operations etc.

- consider adding a C flag (carry)

- This might make it possible then to implement 16 bit and 32 bit arithmetic
routines.

--------------------------------------------------------------------------------

- Look at ways to extend the memory space so that larger programs can
be written. BUS_MAX will need to be extended for this to work.

- Might put BUS_MAX and other 'configuration constants' in a config.py
module, so that it keeps all these things in one machine configuration
file. Can then easily switch between standard LMC and modified machine
architectures by editing 1 file. This file could also offer command line
config parameter settings so that things can be overriden on the command
line or by addition of an external .config file.

--------------------------------------------------------------------------------

- resolve discrepancies in command line arguments

Each tool uses a different set of settings. Would be nice to have an optional
interactive mode, support for io redirection, and also command line parameters
for named files. Can probably all do this with an args helper (we have one of
these in another project)

--------------------------------------------------------------------------------
- write a GPIO abstraction for Raspberry Pi (and anyio)
- Try to define some simple OS calls
- Add some more instructions, like Remainder shifts and rotates
- Document the extension mechanism separately

- Look into BINARY and HEXADECIMAL modes
- see if we can extend the bus width to an arbitrary large number
  (will need logic on the zfill() calls)

--------------------------------------------------------------------------------

USER EXTENDED INSTRUCTIONS X00-X99

EXT 01 USB    - use B register instead of A in next instruction only
EXT 02 MUL    - multiply    A=A*B
EXT 03 DIV    - divide      A=A/B
-- NOT DONE YET
EXT 04 REM    - remainder   A=A%B
EXT 05 SHL    - shift left  A >>= 1
EXT 06 SHR    - shift right A <<= 1
EXT 07 ASL    - arithmetic shift left (multiply by two, sign preserved)
EXT 08 ASR    - arithmetic shift right (divide by two, sign preserved)
EXT 09..99    - reserved for other extended instructions

Could put all of these instructions in a separate python module to
keep them separate from the core architecture.

Note that the B register has been added to the architecture in order to
make it possible to pass two parameters to common extension instructions
like MUL and DIV.

Could all be in python module: extinstrs.py

But note that to add them as mnemonics, the tables in instruction.py
need to be updated - this could be done when extinstr.py first starts,
modifying the default static tables in instruction.py - that way
instruction.py could be written to be just the known LMC subset that
is defined, and extensions added by loading the extinstr.py module.

This will make it easier to add extended instructions to the simulator,
assembler and disassembler, without polluting the core architecture.


--------------------------------------------------------------------------------

HALT CODES

HLT 00       = HLT
HLT01..99    = user halts, for os calls


--------------------------------------------------------------------------------

HARDWARE ACCESS (IO)

IO 01          901           INP
IO 02          902           OUT
IO 00,H03..H99 900,903..999  reserved for other hardware access such as GPIO


--------------------------------------------------------------------------------

CALL AND RETURN

- single level stack

Usual method is to reserve one register for the return address

- multi level stack

Usual method is to reserve one register as stack pointer, and
a block of memory as the stack. Without indexed addressing
or special instructions, code grows quite quickly.

- parameter passing

Can pass parameters on stack.
Or can pass parameters in nominated reserved registers, and where
nested calls are done, an overlay manager is required to assess the
whole call tree, and make all registers non overlapping for all
possible call paths

- return result

Can pass a return result in a nominated register.

Call and return is really a compiler addition, with some conventions as
to memory space usage. e.g.

For a single depth stack

RETADDR DAT 1

For a multi level stack of size 16

SP    DAT 1
STACK DAT 1
      DAT 1
      DAT 1
      DAT 1
      DAT 1
      DAT 1
      DAT 1
      DAT 1
      DAT 1
      DAT 1
      DAT 1
      DAT 1
      DAT 1
      DAT 1
      DAT 1
      DAT 1

Note there is no indexed addressing mode. Although this could be made a bit
easier by adding an extra instruction that does a CALL and another that does
a RETURN, providing the address of the STACK is known and passed into the
simulator somehow (even non symbolically, as we have to be able to simulate
raw .dec files).

The usual way would be to have a LDA STACK; STA SP in the init code
inserted by the compiler at the start of the code, like this:

LMCINIT  LDA STACK
         STA SP


The assembler might have some extended syntax like this, meaning reserve
16 bytes and set them all to zero just to make it a bit easier to specify
larger memory regions in the future.

STACK   DAT 0*16

--------------------------------------------------------------------------------

LIBRARY ROUTINES

It would be nice for the multiply and divide to also be possible as a library
routine that you just call and return.

This means the following
- need a convention that allows call and return to be implemented,
i.e. either a single level stack in memory, or a multi level stack.

- need a librarian, to allow this code to be compiled into a named library
with a named routine name

- need a linker, to allow library functions to be linked in and their
addresses resolved.

--------------------------------------------------------------------------------

LINKER

Compiler/assembler have to have a way to build a symbol table,
that include exported symbols and imported symbols.

All addresses in LMC are absolute, so there is no position independent
code, so linking might require quite a lot of code adjustment at link time.

--------------------------------------------------------------------------------

LIBRARIAN

Need to be able to add output from assembler or compiler (.dec file which
is essentially an unlinked and not yet located in memory, object file).
Table entry includes a symbol table index with all variables and all code
entry routines, as well as all dependent symbols (imports) with some
reference to where they would normally come from (default libraries)

END.
